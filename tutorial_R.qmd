---
engine: julia
execute:
  warning: false
  output: false
---

## Introduction

The purpose of this tutorial is to demonstrate how to conduct a simple Bayesian Distributional Model, i.e., modelling environmental effects on the random error $\sigma$, which allows investigating the confomity of species-area relationships.

The `R` code provided here covers for the following steps:

1. Simulation of species richness for islands nested in archipelagos
2. Visual inspection of the simulated data
3. Modeling the species-area relationship
4. Validation of the results

## Set up

We begin by loading the required packages.

```{r}
library(brms)
library(coda)
library(tidyverse)
library(truncdist)
```

## Simulating data

We begin by setting the fixed parameters for the simulation.
In the notation below $c$ represents an archipelago intercept and $z$ the coefficient for island area $A$ onto species richness $S$.

This gives us Arrhenius law:

$$
S = c A^z
$$

Underlying the $c$ are the hyperparameters $\bar{c}$, the mean of all archipelago intercepts, and $\tau$ the variation of atoll intercepts.

The parameters which together will determine the random error $\sigma$ are the baseline error $\sigma_{base}$, $\gamma_{area}$ and $\gamma_{precip}$.

```{r}
n_archipelago <- 16
c_bar <- 1
tau <- 0.5
c <- rnorm(n_archipelago, mean = c_bar, sd = tau)
z <- 3
gamma_area <- -1.5
gamma_precip <- -0.8
sigma_base <- 0.0
```

We then draw the number of islands for each archipelago from a Poisson distribution with $\lambda = 20$ and truncated at a lower bound of $4$. <!-- truncation is probably redundant given the distribution of Poisson(20) -->

```{r}
#| output: true
dat <- tibble(
  archipelago = 1:n_archipelago,
  n_islands = truncdist::rtrunc(n_archipelago, "pois", a = 4, b = Inf, lambda = 20),
  precip = rnorm(n_archipelago, mean = 0, sd = 1)
) %>%
  tidyr::uncount(n_islands) %>%
  mutate(
    area = rnorm(nrow(.), mean = 0, sd = 1),
    island = seq_len(nrow(.))
  )
```

Finally, we simulate the species `richness` for each island by taking into account each archipelago's intercept and precipitation values.

```{r}
mu <- c[dat$archipelago] + dat$area * z
sigma <- exp(sigma_base + gamma_area * dat$area + gamma_precip * dat$precip)
dat$richness <- rnorm(nrow(dat), mean = mu, sd = sigma)
dat
```

## Model

We can use the `brms` package to specify the distributional model with `R`'s widely-used formula syntax. We use the bf() function to specify our model formula. We define a main effect of area on the mean species richness of an island, and add the archipelago as a random intercept (1 | archipelago). To test for effects on the sigma-parameter (i.e. the 'noise' or 'conformity' of the main effect relationship richness~area, we simply add a second line to the formula and specify the predictors for sigma.

Note that the `save_pars = save_pars(all = TRUE)` is only necessary if model evaluation techniques such as leave-one-out crossvalidation `loo()` are to be used.

```{r}
#| output: true
formula <- bf(
  richness ~ area + (1 | archipelago),
  sigma ~ area + precip
)

model <- brm(
	formula, 
	data = dat,
	family = gaussian(),
	prior = NULL,
	warmup = 1000,
	iter = 2000,
	chains = 4,
	save_pars = save_pars(all = TRUE)
  )

summary(model)

```

The mean parameter estimates match the inputs to the simulation, but we should only move forward with this analysis after having validated that there were no computational issues with MCMC sampling.
If the sampling algorithms at the root of our inference were to show problematic behaviour, we should not interpret our results at all.

## Validation

Just like frequentist, linear models, Bayesian models also require some thorough investigation and validation before extracting and plotting the estimates. This short tutorial is not intended to provide a comprehensive introduction into best practiceses of Bayesian model validation. Instead, we refer interested readers to some key references, such as the WAMBS checklist: https://doi.org/10.1037/met0000065.

Below we provide a short code with some key built-in functions of the 'brms' package to assess our Bayesian distributional model.
After having evaluated the model, we can plot the conditional effects on the mean (dpar="mu") and on the distributional sigma parameter (dpar="sigma") by calling the conditional_effects() function.

```{r}
plot(model)

pp_check(model, type = "dens_overlay")
pp_check(model, type = "scatter_avg")
pp_check(model, type = "stat_2d")
pp_check(model, type = "ribbon")
pp_check(model, type = "stat", var = "stat")

loo(model, moment_match = TRUE)

coda::gelman.diag(as.mcmc(model))
coda::geweke.diag(as.mcmc(model))

conditional_effects(model, dpar = "mu")
conditional_effects(model, dpar = "sigma")

posterior_draws <- as_draws_df(model, variable = "^b_", regex = TRUE) %>% as.data.frame()
fixed_effects <- fixef(model)

```
